const axios=require('axios');const{getFreshProxy}=require('./proxyApi');class Request{constructor(userAgent){this.userAgent=userAgent}async get(url,headers=null,useProxy=false,retries=3){for(let attempt=1;attempt<=retries;attempt++){try{const options={url,method:'get',headers:{...(headers||{}),'User-Agent':this.userAgent,},};if(useProxy){const proxyConfig=await this.getFreshProxy();if(proxyConfig){options.proxy={host:proxyConfig.host,port:proxyConfig.port,protocol:url.match(/^(http|https):/)[0],auth:{username:proxyConfig.username,password:proxyConfig.password,},}}}else{options.proxy=null}const response=await axios(options);if(response.status===200){const data=response.data;return data}else{console.warn(`Failed to fetch data.Server responded with status ${response.status}`)}}catch(error){console.error(`代理服务器异常，2秒后尝试重新请求！`);if(attempt<retries){console.log(`Retrying in 2 seconds...`);await new Promise(resolve=>setTimeout(resolve,2000))}else{throw error;}}}}async post(url,data,headers=null,useProxy=false,retries=3){for(let attempt=1;attempt<=retries;attempt++){try{const options={url,method:'post',data,headers:{...(headers||{}),'User-Agent':this.userAgent,},};if(useProxy){const proxyConfig=await this.getFreshProxy();if(proxyConfig){options.proxy={host:proxyConfig.host,port:proxyConfig.port,protocol:url.match(/^(http|https):/)[0],auth:{username:proxyConfig.username,password:proxyConfig.password,},}}}else{options.proxy=null}const response=await axios(options);if(response.status===200){const responseData=response.data;return responseData}else{console.warn(`Failed to post data.Server responded with status ${response.status}`)}}catch(error){console.error(`代理服务器异常，2秒后尝试重新请求！`);if(attempt<retries){console.log(`Retrying in 2 seconds...`);await new Promise(resolve=>setTimeout(resolve,2000))}else{throw error;}}}}async getFreshProxy(){try{const proxyData=await getFreshProxy();return{host:proxyData.ip,port:proxyData.port,username:proxyData.http_user,password:proxyData.http_pass,}}catch(error){console.warn('Failed to fetch a fresh proxy, using no proxy instead:',error);return null}}}module.exports=Request;